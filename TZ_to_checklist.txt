-Ячейки типа "ничего"
  -если ссыль на ячейку ничегошную
	-а арифметические операции с ними?
-ячейки с неотриц числами
	-а если отрицательное
	-а если не целое
	-а если цифра-буквы?
	-а если тупо строка без апострофа?
-Текстовые строки, которые начинаются с символа ' 
	-а если в строке этот символ встречается еще раз?
-Строки-выражения, которые начинаются с символа '=' и могут содержать неотрицательные целые числа, ссылки на ячейки и простые арифметические выражения. 
	-выражение из одного числа
	-то же, неотриц число
	-минус перед первым числом
	-минус перед первым единственным числом
	-минус перед непервым числом
-Скобки запрещены, у всех операций одинаковый приоритет.
	-глянуть код
-Ссылки на ячейки состоят из одной латинской буквы и следующей за ней цифры.
	-ссылка в формуле, по всем типам ячеек
	-ссылка не в формуле, пов сем типам ячеек
	
-expression ::= '=' term {operation term}* 
-term ::= cell_reference | nonnegative_number 
	-никаких адекватно хаваемых лишних пробелов
-cell_reference ::= [A-Za-z][0-9] 
	-ОДНА буква
	-ОДНА цифра
-operation ::= '+' | '-' | '*' | '/' 
-text ::= '\'' {printable_character} 

-Все выражения должны быть заменены на вычисленный результат. 
	-тут все подряд гоняем
	-тест на кольцо
	-тест на кольцо с ручкой спереди/сзади
	-тест на восьмерку
	-операция с пустой ячейкой
-Ячейки с текстом должны быть вычислены как соответствующий текст без префикса '
-Операции над строками текста запрещены. 
	-операция со строка+строка
	-операция строка-число, число-строка
		-числа из ячеек
		-числа числа
	-операция пусто-строка, строка-пусто
-В случае любой ошибки вычисления формулы, вычисляемая ячейка должна содержать слово-сообщение об ошибке, начинающееся с символа '#'. Используйте короткие, ясные сообщения. Не надо предоставлять подробности об ошибках в выводе. 
-Программа должна использовать только стандартные библиотеки и классы и не должна вызывать сторонние программы, библиотеки или системные компоненты. 
	-глянуть код, но вероятность косяка тут 0.00001
	
-Программа получает описание таблицы с формулами из стандартного ввода, вычисляет ее и печатает полученный результат в стандартный вывод.
	-как обрабатывается окончание таблицы?
	-что происходит с последним переносом строки?
-Программа получает описание таблицы с формулами из стандартного ввода, вычисляет ее и печатает полученный результат в стандартный вывод. 
	-несколько табов как обрабатываются?
	-если некорректный размер по факту появился?
-Первая строка содержит пару чисел, разделенных табуляцией - высоту и ширину таблицы, соответственно.
	-шаг влево, шаг вправо - расстрел
		-повторные табы, пробелы
		-отрицательные числа
		-не числа
		-не целые числа (ДОПУЩЕНИЕ)
		
-Выход должен содержать только ожидаемую информацию, включая сообщения об ошибках, и никакой другой информации в выводе не должно быть, включая и welcome text. Выход должен быть отформатирован в соответствии с приведенным ниже примером.
	-никаких ошибок при неформатном входе никуда не кидаем (ДОПУЩЕНИЕ)
	
-ПРИМЕР
	-в примере первая строка первая а на нулевая. 
		-Как соотносится с грамматикой?  (ДОПУЩЕНИЕ)
		-как разрулить для больших индексов в таблице?
	
-Решение должно содержать тестовые примеры 
-и код тоже
-Не забудьте откомментировать код в ключевых местах
-устойчивость к ошибкам (ну типа, весь чеклист ок - тут плюс)

-Необходимо реализовать только то, что нужно на этой фазе
-потом расширение формул строковыми операциями
	-указать, какие нужны изменения
		-строка+строка
		-строка+число
		-строка+ничего
		-и т.д.
-Оптимизировать производительность для громадных таблиц.
	-указать, какие нужны изменения
		-по индексам в таблице (письмо Паши)
		-по памяти
		-по вычислительной сложности
		
-Для полноценного проектирования решения этой задачи в иерархию классов C++ необходимо вывести кое-какие условия, о которых умолчано в задании, затем тщательно проанализировать все условия вместе и принять пять ключевых решений по выбору того или иного пути реализации.
	-эта шняга нужна ДЛЯ ПРОЕКТИРОВАНИЯ О_О то есть те допущения к этому не относятся
	
